h2. BrowserCMS Deployment Guide

This guide covers how to setup the Apache Passenger (mod_rails) production environment for your BrowserCMS application.

This guide is for BrowserCMS *3.1*. Some code shown here may not work with older versions of BrowserCMS.

endprologue.

h3. Configure the Production Environment

Make sure the config/environments/production.rb file has these following configuration settings.  If you created your BrowserCMS Rails app using one of the application templates, this will already have been added but you may need to configure them to match your site's domain and mail server. 

<ruby>
SITE_DOMAIN="www.sitedomain.com" # This should match the URL for your public CMS site.
config.action_view.cache_template_loading = false
config.action_controller.page_cache_directory = RAILS_ROOT + "/public/cache/"
config.action_mailer.smtp_settings = {:address => 'mail.yourmailserver.com',
                                      :domain => "#{SITE_DOMAIN}"}
</ruby>

The SITE_DOMAIN in particular is used to build links to CMS pages that can be emailed.

h3. Setting Up Virtual Hosts for Page Caching

In order to setup BrowserCMS to due page caching, you need to create two virtual hosts for your site.  The main purpose for this is to allow page caching to work when you access a page on the main site, but then have the pages not be served from the cache when you are working in the BrowserCMS interface.

<plain>
<VirtualHost *:80>
  ServerName cms.mysite.com
  DocumentRoot "/var/sites/mysite/public"
  RailsEnv production
  <directory "/var/sites/mysite/public">
    Order allow,deny
    Allow from all
  </directory>
</VirtualHost>

<VirtualHost *:80>
  ServerName mysite.com
  DocumentRoot "/var/sites/mysite/public"
  RailsEnv production
  RewriteEngine On
  
  # Uncomment for rewrite debugging
  #RewriteLog /var/sites/mysite/log/rewrite.log
  #RewriteLogLevel 9

  #apache should serve cached pages
  RewriteRule ^/$ /cache/index.html [QSA]
  RewriteRule ^([^.]+)$ /cache/$1.html [QSA]
  
  <directory "/var/sites/mysite/public">
    Order allow,deny
    Allow from all
  </directory>
</VirtualHost>
</plain>

h3. Using Capistrano to Deploy

If you plan to use Capistrano to deploy your sites, you will likely need to make some additional configuration changes. In particular, you will want to change where files are uploaded to. For example, add the following your _config/initializers/browsercms.rb_ file.

<ruby>
if RAILS_ENV == 'production'
  # Uploaded files/images will be written out to this directory instead of the default (tmp/uplaods) directory
  Attachment.storage_location = File.join(Rails.root, "uploads")
end	
</ruby>

Then update your config/deploy.rb (which Capistrano should generate) so that it creates an shared/uploads directory, and a symlink to it from within your project. 

<ruby>
task :link_shared_directories do
  run "ln -s #{shared_path}/uploads #{release_path}/uploads"
end

after "deploy:update_code", :link_shared_directories
</ruby> 

The binary data for uploaded files will be placed in shared/uploads and the CMS will serve the data from there.
